# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CMAKE_GENERATOR: MinGW Makefiles
  CMAKE_MODULE_PATH: |
    C:/mingw64/lib/cmake/SDL2
  CMAKE_SDL2_PATH: C:/mingw64/lib/cmake/SDL2

  
# defaults:
#   run:
#     shell: msys2 {0}

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
    # - name: Get latest CMake
    #   uses: lukka/get-cmake@latest
    - uses: msys2/setup-msys2@v2
      with:
        cache: true
        update: true
        install: >-
          make
          git
        pacboy: >-
          cmake:p
          qt6:p
          gtest:p
          SDL2:p
          spdlog:p
          toolchain:p
          openssl:p
          sqlite3:p
          
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -G "${{env.CMAKE_GENERATOR}}" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build build

    - name: Run unit tests
      run: build/fl_test

    - name: Prepare artifact
      run: |
        windeployqt build/your_application.exe
        cp /mingw64/bin/SDL2.dll build/
        cp /mingw64/bin/libstdc++-6.dll build/
        cp /mingw64/bin/libgcc_s_seh-1.dll build/
        cp /mingw64/bin/libwinpthread-1.dll build/

    # - name: Build
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}

